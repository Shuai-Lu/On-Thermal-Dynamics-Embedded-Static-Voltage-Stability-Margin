function my_oef_vsm(dhs_control_mode, num_iter)
% thermal dynamic embedded voltage security margin
% by Shuai Lu
% Southeast University
% shuai.lu.seu@outlook.com
% 2022-08-14

fprintf('%-40s\t\t', '- Voltage stability margin - ies');
t0 = clock;
global data model record;

%%
num_period = data.settings.num_period;
num_bus = size(data.eps.bus, 1);

%%
%%
model.ies_vsm.obj = 0;
model.ies_vsm.obj_e = 0;
model.ies_vsm.obj_h = 0;
model.ies_vsm.var = [];
model.ies_vsm.cons = [];

%%
% % eps
model.ies_vsm.var.lambda_e = sdpvar(1, 1, 'full');
model.ies_vsm.var.lambda_h = sdpvar(1, 1, 'full');
model.ies_vsm.var.lambda_h = 0.05 * (num_iter - 1);


%%
model_eps();
model_dhn();
model_building();
model_couple();
model_regulation_strategy(dhs_control_mode, num_iter);

%% obj
model.ies_vsm.obj_e = sum(model.ies_vsm.var.eps.cost_gen(:));
model.ies_vsm.obj_h = sum(model.ies_vsm.var.dhn.cost_device(:));

model.ies_vsm.obj = - model.ies_vsm.var.lambda_e + ...
    - model.ies_vsm.var.lambda_h;

t1 = clock;
fprintf('%10.2f%s\n', etime(t1,t0), 's');

%% initialize
% assign(model.ies_vsm.var.eps.P, model.oef.var.eps.P);
% assign(model.ies_vsm.var.eps.Q, model.oef.var.eps.Q);
% assign(model.ies_vsm.var.eps.U, model.oef.var.eps.U);
% assign(model.ies_vsm.var.eps.theta, model.oef.var.eps.theta);
% assign(model.ies_vsm.var.eps.P_gen, model.oef.var.eps.P_gen);
% assign(model.ies_vsm.var.eps.Q_gen, model.oef.var.eps.Q_gen);
% assign(model.ies_vsm.var.eps.H_gen, model.oef.var.eps.H_gen);
% assign(model.ies_vsm.var.eps.ratio_gen, model.oef.var.eps.ratio_gen);
%
% assign(model.ies_vsm.var.dhn.T_pipe_s_in, model.oef.var.dhn.T_pipe_s_in);
% assign(model.ies_vsm.var.dhn.T_pipe_s_out, model.oef.var.dhn.T_pipe_s_out);
% assign(model.ies_vsm.var.dhn.T_pipe_r_in, model.oef.var.dhn.T_pipe_r_in);
% assign(model.ies_vsm.var.dhn.T_pipe_r_out, model.oef.var.dhn.T_pipe_r_out);
%
%
% assign(model.ies_vsm.var.dhn.T_pipe_s_in, data.settings.T_source_set);
% assign(model.ies_vsm.var.dhn.T_pipe_s_out, data.settings.T_source_set);
%
% %% get the initial value
% model.ies_vsm.ops = sdpsettings('solver', 'fmincon', 'verbose', 1, 'usex0', 1);
% model.ies_vsm.sol_initial = optimize(model.ies_vsm.cons, model.ies_vsm.obj, model.ies_vsm.ops);
%
% if ~ model.ies_vsm.sol_initial.problem
%     fprintf('%s%.4f%s\n','solvertime: ', model.ies_vsm.sol_initial.solvertime,' s');
% else
%     fprintf('%s\n', model.ies_vsm.sol_initial.info);
% end
%
% fprintf('\n');
% assign_x0('model.ies_vsm.var');
% assign(model.ies_vsm.var.dhn.T_pipe_s_in, data.settings.T_source_set);
% assign(model.ies_vsm.var.dhn.T_pipe_s_out, data.settings.T_source_set);

if num_iter == 1
    assign(model.ies_vsm.var.eps.P, model.oef.var.eps.P);
    assign(model.ies_vsm.var.eps.Q, model.oef.var.eps.Q);
    assign(model.ies_vsm.var.eps.U, model.oef.var.eps.U);
    assign(model.ies_vsm.var.eps.theta, model.oef.var.eps.theta);
    assign(model.ies_vsm.var.eps.P_gen, model.oef.var.eps.P_gen);
    assign(model.ies_vsm.var.eps.Q_gen, model.oef.var.eps.Q_gen);
    assign(model.ies_vsm.var.eps.H_gen, model.oef.var.eps.H_gen);
    assign(model.ies_vsm.var.eps.ratio_gen, model.oef.var.eps.ratio_gen);

    assign(model.ies_vsm.var.dhn.T_pipe_s_in, model.oef.var.dhn.T_pipe_s_in);
    assign(model.ies_vsm.var.dhn.T_pipe_s_out, model.oef.var.dhn.T_pipe_s_out);
    assign(model.ies_vsm.var.dhn.T_pipe_r_in, model.oef.var.dhn.T_pipe_r_in);
    assign(model.ies_vsm.var.dhn.T_pipe_r_out, model.oef.var.dhn.T_pipe_r_out);
    assign(model.ies_vsm.var.dhn.h_pipe_s_in, model.oef.var.dhn.h_pipe_s_in);
    assign(model.ies_vsm.var.dhn.h_pipe_s_out, model.oef.var.dhn.h_pipe_s_out);
    assign(model.ies_vsm.var.dhn.h_pipe_r_in, model.oef.var.dhn.h_pipe_r_in);
    assign(model.ies_vsm.var.dhn.h_pipe_r_out, model.oef.var.dhn.h_pipe_r_out);



elseif num_iter >= 2
    my_assign(num_iter);
end

% model.ies_vsm.ops = sdpsettings('solver', 'fmincon', 'verbose', 0, 'usex0', 1);
% model.ies_vsm.sol_initial = optimize(model.ies_vsm.cons, model.ies_vsm.obj, model.ies_vsm.ops);
% fprintf('%s\n', model.ies_vsm.sol_initial.info);
% assign_x0('model.ies_vsm.var');

%% solve
fprintf('%-40s\n', '- Solving model ...');
model.ies_vsm.ops = sdpsettings('solver', 'ipopt', 'verbose', 0, 'usex0', 1);
model.ies_vsm.ops.ipopt.max_iter = 1e4;
model.ies_vsm.ops.ipopt.max_cpu_time = 1e8;
% model.ies_vsm.ops.ipopt.tol = 1e-6;
% model.ies_vsm.ops.ipopt.fixed_variable_treatment = 'RELAX_BOUNDS';
% model.ies_vsm.ops.fmincon.TolCon = 1e-4;
% model.ies_vsm.ops.fmincon.MaxIter = 1e8;
% model.ies_vsm.ops.fmincon.ProblemdefOptions.MaxFunctionEvaluations = 1e6;

model.ies_vsm.sol = optimize(model.ies_vsm.cons, model.ies_vsm.obj, model.ies_vsm.ops);

if ~ model.ies_vsm.sol.problem
    model.ies_vsm = myFun_GetValue(model.ies_vsm);
    fprintf('%s%.4f\n','Object: ', model.ies_vsm.obj);
    fprintf('%s%.4f%s\n','solvertime: ', model.ies_vsm.sol.solvertime,' s');
else
    fprintf('%s\n', model.ies_vsm.sol.info);
end

%%
% t1 = clock;
% fprintf('%10.2f%s\n', etime(t1,t0), 's');

end

%% model of electrical power system
function model_eps()
global data model;
num_period = data.settings.num_period;
time_interval = data.settings.time_interval;
num_bus = size(data.eps.bus, 1);
num_branch = size(data.eps.branch, 1);
num_gen = size(data.eps.gen, 1);
indexset_load = find(data.eps.bus(:,2) == 1);
indexset_gen = find(data.eps.bus(:,2) > 1);
indexset_chp = find(data.eps.gen(:,24) == 2);
indexset_nonchp = setdiff(indexset_gen, indexset_chp);

%%
model.ies_vsm.var.eps.P = sdpvar(num_period, num_bus, 'full');
model.ies_vsm.var.eps.Q = sdpvar(num_period, num_bus, 'full');
model.ies_vsm.var.eps.U = sdpvar(num_period, num_bus, 'full');
model.ies_vsm.var.eps.theta = sdpvar(num_period, num_bus, 'full');

model.ies_vsm.var.eps.P_branch = sdpvar(num_period, num_branch, 'full');
model.ies_vsm.var.eps.Q_branch = sdpvar(num_period, num_branch, 'full');
model.ies_vsm.var.eps.P_branch_inverse = sdpvar(num_period, num_branch, 'full');
model.ies_vsm.var.eps.Q_branch_inverse = sdpvar(num_period, num_branch, 'full');

model.ies_vsm.var.eps.P_gen = sdpvar(num_period, num_gen, 'full');
model.ies_vsm.var.eps.Q_gen = sdpvar(num_period, num_gen, 'full');
model.ies_vsm.var.eps.H_gen = sdpvar(num_period, num_gen, 'full');
model.ies_vsm.var.eps.ratio_gen = sdpvar(num_period, num_gen, 4, 'full');
model.ies_vsm.var.eps.cost_gen = sdpvar(num_period, num_gen, 'full');

%%
basekV = data.eps.bus(1,10);
baseMVA = data.settings.baseMVA;
[Ybus, Yf, Yt] = makeYbus(baseMVA, data.eps.bus, data.eps.branch);
Ybus = full(Ybus);
Gbus = real(Ybus);
Bbus = imag(Ybus);
% Yf = full(Yf);
% Yt = full(Yt);

%% Network
% % power flow
for i = 1 : num_bus
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.P(:, i) == ...
        model.ies_vsm.var.eps.U(:, i) .* ( ...
        model.ies_vsm.var.eps.U(:, :) .* ...
        (cos(model.ies_vsm.var.eps.theta(:,i) * ones(1, num_bus) - model.ies_vsm.var.eps.theta(:,:))) * ...
        Gbus(:, i)  + ...
        model.ies_vsm.var.eps.U(:, :) .* ...
        (sin(model.ies_vsm.var.eps.theta(:,i) * ones(1, num_bus) - model.ies_vsm.var.eps.theta(:,:))) * ...
        Bbus(:, i))) : ...
        'P balance at bus');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.Q(:, i) == ...
        model.ies_vsm.var.eps.U(:, i) .* ( ...
        model.ies_vsm.var.eps.U(:, :) .* ...
        (sin(model.ies_vsm.var.eps.theta(:,i) * ones(1, num_bus) - model.ies_vsm.var.eps.theta(:,:))) * ...
        Gbus(:, i)  - ...
        model.ies_vsm.var.eps.U(:, :) .* ...
        (cos(model.ies_vsm.var.eps.theta(:,i) * ones(1, num_bus) - model.ies_vsm.var.eps.theta(:,:))) * ...
        Bbus(:, i))) : ...
        'Q balance at bus');
end

for k = 1 : num_branch
    i = data.eps.branch(k,1);
    j = data.eps.branch(k,2);
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.P_branch(:, k) == ...
        model.ies_vsm.var.eps.U(:, i) .^ 2 * (-Gbus(i, j)) + ...
        model.ies_vsm.var.eps.U(:, i) .* ...
        model.ies_vsm.var.eps.U(:, j) .* ...
        (cos(model.ies_vsm.var.eps.theta(:,i) - model.ies_vsm.var.eps.theta(:,j)) * ...
        Gbus(i, j)  + ...
        sin(model.ies_vsm.var.eps.theta(:,i) - model.ies_vsm.var.eps.theta(:,j)) * ...
        Bbus(i, j))) : ...
        'P branch at k');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.Q_branch(:, k) == ...
        model.ies_vsm.var.eps.U(:, i) .^ 2 * (Bbus(i, j)) + ...
        model.ies_vsm.var.eps.U(:, i) .* ...
        model.ies_vsm.var.eps.U(:, j) .* ...
        (sin(model.ies_vsm.var.eps.theta(:,i) - model.ies_vsm.var.eps.theta(:,j)) * ...
        Gbus(i, j)  - ...
        (cos(model.ies_vsm.var.eps.theta(:,i) - model.ies_vsm.var.eps.theta(:,j)) * ...
        Bbus(i, j)))) : ...
        'P branch at k');

    % % inverse
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.P_branch_inverse(:, k) == ...
        model.ies_vsm.var.eps.U(:, j) .^ 2 * (-Gbus(j, i)) + ...
        model.ies_vsm.var.eps.U(:, j) .* ...
        model.ies_vsm.var.eps.U(:, i) .* ...
        (cos(model.ies_vsm.var.eps.theta(:,j) - model.ies_vsm.var.eps.theta(:,i)) * ...
        Gbus(j, i)  + ...
        sin(model.ies_vsm.var.eps.theta(:,j) - model.ies_vsm.var.eps.theta(:,i)) * ...
        Bbus(j, i))) : ...
        'P branch at k');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.Q_branch_inverse(:, k) == ...
        model.ies_vsm.var.eps.U(:, j) .^ 2 * (Bbus(j, i)) + ...
        model.ies_vsm.var.eps.U(:, j) .* ...
        model.ies_vsm.var.eps.U(:, i) .* ...
        (sin(model.ies_vsm.var.eps.theta(:,j) - model.ies_vsm.var.eps.theta(:,i)) * ...
        Gbus(j, i)  - ...
        (cos(model.ies_vsm.var.eps.theta(:,j) - model.ies_vsm.var.eps.theta(:,i)) * ...
        Bbus(j, i)))) : ...
        'P branch at k');
end

% % branch power
model.ies_vsm.var.eps.S_branch_limit_square = ...
    3 * ones(data.settings.num_period, 1) * ...
    (data.eps.branch(:, 6) .^ 2)' / ...
    data.settings.baseMVA .^2;

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.P_branch .^2 /9 + model.ies_vsm.var.eps.Q_branch .^2 /9 <= ...
    model.ies_vsm.var.eps.S_branch_limit_square /3) : ...
    'Thermal limit of branch');


% % bus voltage
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    0.9 <= model.ies_vsm.var.eps.U <= 1.1) : 'Bus voltage');
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.U(:,1) == 1.1) : 'Slack bus voltage');

% % bus phase
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    -pi/2 <= model.ies_vsm.var.eps.theta <= pi/2) : 'Bus phase');
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.theta(:,1) == 0) : 'Slack bus phase');

% % gen bus
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.P(:, indexset_gen) * baseMVA == ...
    model.ies_vsm.var.eps.P_gen): 'P at gen bus');
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.Q(:, indexset_gen) * baseMVA == ...
    model.ies_vsm.var.eps.Q_gen): 'Q at gen bus');


%% Generator
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    ones(num_period, 1) * data.eps.gen(:,10)' <= ...
    model.ies_vsm.var.eps.P_gen <= ...
    ones(num_period, 1) * data.eps.gen(:,9)') : 'P of gen');
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    ones(num_period, 1) * data.eps.gen(:,5)' <= ...
    model.ies_vsm.var.eps.Q_gen <= ...
    ones(num_period, 1) * data.eps.gen(:,4)') : 'Q of gen');

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.H_gen(:, indexset_nonchp) == 0): 'Q at gen bus');
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    reshape(model.ies_vsm.var.eps.ratio_gen(:, indexset_nonchp,:), [], 1) == 0): 'Q at gen bus');

for i = 1 : size(indexset_chp)
    num_pt = data.eps.gen(indexset_chp(i), 25);
    extrm_point_P = data.eps.gen(indexset_chp(i), 26:2 : 26+2*num_pt-2)';
    extrm_point_H = data.eps.gen(indexset_chp(i), 27:2 : 27+2*num_pt-2)';

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.P_gen(:, indexset_chp(i)) == ...
        reshape(model.ies_vsm.var.eps.ratio_gen(:, indexset_chp(i), 1:num_pt), [], num_pt) * ...
        extrm_point_P) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.eps.H_gen(:, indexset_chp(i)) == ...
        reshape(model.ies_vsm.var.eps.ratio_gen(:, indexset_chp(i), 1:num_pt), [], num_pt) * ...
        extrm_point_H) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        0 <= reshape(model.ies_vsm.var.eps.ratio_gen(:, indexset_chp(i), 1:num_pt), [], num_pt) ...
        <= 1) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        sum(reshape(model.ies_vsm.var.eps.ratio_gen(:, indexset_chp(i), 1:num_pt), [], num_pt), 2) ...
        == 1) : '');

end
%% Obj
model.ies_vsm.var.eps.cost_gen(:, indexset_nonchp) = ...
    ones(num_period, 1) * data.eps.gencost(indexset_nonchp, 5)' .* ...
    (model.ies_vsm.var.eps.P_gen(:, indexset_nonchp) * time_interval) .^2 + ...
    ones(num_period, 1) * data.eps.gencost(indexset_nonchp, 6)' .* ...
    (model.ies_vsm.var.eps.P_gen(:, indexset_nonchp) * time_interval) + ...
    ones(num_period, 1) * data.eps.gencost(indexset_nonchp, 7)';

model.ies_vsm.var.eps.cost_gen(:, indexset_chp) = ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 5)' .* ...
    (model.ies_vsm.var.eps.P_gen(:, indexset_chp) * time_interval) .^2 + ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 6)' .* ...
    (model.ies_vsm.var.eps.P_gen(:, indexset_chp) * time_interval) + ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 7)' + ...
    ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 9)' .* ...
    (model.ies_vsm.var.eps.H_gen(:, indexset_chp) * time_interval) .^2 + ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 10)' .* ...
    (model.ies_vsm.var.eps.H_gen(:, indexset_chp) * time_interval) + ...
    ones(num_period, 1) * data.eps.gencost(indexset_chp, 11)' + ...
    (model.ies_vsm.var.eps.H_gen(:, indexset_chp) * time_interval) .* ...
    (model.ies_vsm.var.eps.P_gen(:, indexset_chp) * time_interval);

end


%% model of district heating network
function model_dhn()
global data model;
%%
loc = data.loc.dhn;

% % - Data
rho_w = 1;     % t/m^3;
c_w = 4.200;  % MJ/(t*℃)
pi = 3.1416;
num_initialtime = data.settings.num_initialtime_dhn;
time_interval_elec = data.settings.time_interval;
time_interval_heat = data.settings.time_interval_heat;
num_period_heat = data.settings.num_period*time_interval_elec/time_interval_heat;
num_start = num_initialtime + 1;
num_end = num_initialtime + num_period_heat;

% %
num_pipe = size(data.dhn.pipe,1);
num_node = size(data.dhn.node,1);
indexset_source = find(data.dhn.node(:, loc.node.sourceflow) ~= 0);
indexset_nonsource = setdiff(1:num_node, indexset_source);
indexset_load = find(data.dhn.node(:, loc.node.loadflow) ~= 0);
indexset_nonload = setdiff(1:num_node, indexset_load);
% %
indexset_eb = find(data.dhn.device(:, loc.device.type) == 1);
indexset_gb = find(data.dhn.device(:, loc.device.type) == 2);
num_eb = size(indexset_eb,1);
num_gb = size(indexset_gb,1);

num_device = size(data.dhn.device, 1);

%% Calculate basic parameters
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
data.dhn.pipe(:, loc.pipe.massflow) = (1 + model.ies_vsm.var.lambda_h) * ...
    data.dhn.pipe_0(:, loc.pipe.massflow);
data.dhn.node(:, [loc.node.sourceflow loc.node.loadflow]) = (1 + model.ies_vsm.var.lambda_h) * ...
    data.dhn.node_0(:, [loc.node.sourceflow loc.node.loadflow]);
 
flowrate = 1/3600 * data.dhn.pipe(:, loc.pipe.massflow) ./ ...
    (pi/4 * data.dhn.pipe(:, loc.pipe.diameter) .^2);

if max(flowrate) >= 2
    ratio = max(flowrate)/2;
    data.dhn.pipe(:, loc.pipe.massflow) = ...
        data.dhn.pipe(:, loc.pipe.massflow) / ratio;

    data.dhn.node(:, [loc.node.sourceflow loc.node.loadflow]) = ...
        data.dhn.node(:, [loc.node.sourceflow loc.node.loadflow]) / ratio;
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Area = data.dhn.pipe(:, loc.pipe.diameter).^2*pi/4;
gamma = ceil(rho_w*Area.*data.dhn.pipe(:, loc.pipe.length)./...
    data.dhn.pipe(:, loc.pipe.massflow)./time_interval_heat) - 1;
R = (gamma + 1).*data.dhn.pipe(:, loc.pipe.massflow) * time_interval_heat;
kappa = (R - rho_w*Area.*data.dhn.pipe(:, loc.pipe.length))./...
    data.dhn.pipe(:, loc.pipe.massflow)./time_interval_heat;
beta = exp(-3600 * 1e-6 * time_interval_heat * ...
    data.dhn.pipe(:, loc.pipe.conductivity) ./ ...  % MJ
    (rho_w * c_w * Area) .* (gamma + 3/2 - kappa));

Tamb = ones(2 * num_initialtime + num_period_heat,1) * data.dhn.pipe(:, loc.pipe.Tamb)';
%% Write in params of heating network
data.dhn.params.Area = Area;
data.dhn.params.gamma = gamma;
data.dhn.params.R = R;
data.dhn.params.kappa = kappa;
data.dhn.params.beta = beta;
data.dhn.params.Tamb = Tamb;

%% define vars
model.ies_vsm.var.dhn.T_pipe_s_in = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.T_pipe_s_out = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.T_pipe_r_in = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.T_pipe_r_out = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.h_pipe_s_in = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.h_pipe_s_out = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.h_pipe_r_in = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.h_pipe_r_out = sdpvar(num_period_heat + num_initialtime, num_pipe, 'full');
model.ies_vsm.var.dhn.T_node_s = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.T_node_r = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_source_s = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_source_r = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_source = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_load_s = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_load_r = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_load = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.T_source_s = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.T_source_r = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.T_load_s = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.T_load_r = sdpvar(num_period_heat + num_initialtime, num_node, 'full');
model.ies_vsm.var.dhn.h_gb = sdpvar(num_period_heat + num_initialtime, num_gb, 'full');
model.ies_vsm.var.dhn.h_eb = sdpvar(num_period_heat + num_initialtime, num_eb, 'full');
model.ies_vsm.var.dhn.P_eb = sdpvar(num_period_heat + num_initialtime, num_eb, 'full');
model.ies_vsm.var.dhn.cost_gb = sdpvar(num_period_heat + num_initialtime, num_gb, 'full');
model.ies_vsm.var.dhn.cost_eb = sdpvar(num_period_heat + num_initialtime, num_eb, 'full');

model.ies_vsm.var.dhn.h_device = sdpvar(num_period_heat + num_initialtime, num_device, 'full');
model.ies_vsm.var.dhn.P_device = sdpvar(num_period_heat + num_initialtime, num_device, 'full');
model.ies_vsm.var.dhn.cost_device = sdpvar(num_period_heat + num_initialtime, num_device, 'full');

%% Initialize variable
model.ies_vsm.var.dhn.T_pipe_s_in(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.pipe(:,loc.pipe.Ts_initial)';
model.ies_vsm.var.dhn.T_pipe_r_in(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.pipe(:,loc.pipe.Tr_initial)';
model.ies_vsm.var.dhn.T_pipe_s_out(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.pipe(:,loc.pipe.Ts_initial)';
model.ies_vsm.var.dhn.T_pipe_r_out(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.pipe(:,loc.pipe.Tr_initial)';
model.ies_vsm.var.dhn.T_node_s(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.node(:,loc.node.Ts_initial)';
model.ies_vsm.var.dhn.T_node_r(1:num_initialtime,:) = ...
    ones(num_initialtime, 1) * data.dhn.node(:,loc.node.Tr_initial)';
model.ies_vsm.var.dhn.h_pipe_s_in(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_pipe_s_out(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_pipe_r_in(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_pipe_r_out(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_source_s(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_source_r(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_load_s(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_load_r(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_source(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.h_load(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.T_source_s(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.T_source_r(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.T_load_s(1:num_initialtime,:) = 0;
model.ies_vsm.var.dhn.T_load_r(1:num_initialtime,:) = 0;

model.ies_vsm.var.dhn.h_eb(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.h_gb(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.P_eb(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.cost_eb(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.cost_gb(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.h_device(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.P_device(1:num_initialtime, :) = 0;
model.ies_vsm.var.dhn.cost_device(1:num_initialtime, :) = 0;


%%
t = num_start : num_end;
model.ies_vsm.var.dhn.T_source_s(t, indexset_nonsource) = 0;
model.ies_vsm.var.dhn.T_source_r(t, indexset_nonsource) = 0;
model.ies_vsm.var.dhn.T_load_s(t, indexset_nonload) = 0;
model.ies_vsm.var.dhn.T_load_r(t, indexset_nonload) = 0;

model.ies_vsm.var.dhn.h_source(t, indexset_nonsource) = 0;
model.ies_vsm.var.dhn.h_source_s(t, indexset_nonsource) = 0;
model.ies_vsm.var.dhn.h_source_r(t, indexset_nonsource) = 0;

model.ies_vsm.var.dhn.h_load(t, indexset_nonload) = 0;
model.ies_vsm.var.dhn.h_load_s(t, indexset_nonload) = 0;
model.ies_vsm.var.dhn.h_load_r(t, indexset_nonload) = 0;


%% heat power at source node
t = num_start : num_end;
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.h_source(t, indexset_source) == ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_source, loc.node.sourceflow)' .* ...
    (model.ies_vsm.var.dhn.T_source_s(t, indexset_source) - ...
    model.ies_vsm.var.dhn.T_source_r(t, indexset_source))) : ...
    'h_source = cw * (T_s - T_r)');

model.ies_vsm.var.dhn.h_source_s(t, indexset_source) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_source, loc.node.sourceflow)' .* ...
    model.ies_vsm.var.dhn.T_source_s(t, indexset_source);
model.ies_vsm.var.dhn.h_source_r(t, indexset_source) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_source, loc.node.sourceflow)' .* ...
    model.ies_vsm.var.dhn.T_source_r(t, indexset_source);


%% power at load node
t = num_start : num_end;
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.h_load(t, indexset_load) == ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_load, loc.node.loadflow)' .* ...
    (model.ies_vsm.var.dhn.T_load_s(t, indexset_load) - ...
    model.ies_vsm.var.dhn.T_load_r(t, indexset_load))) : ...
    'h_load = cw * (T_s - T_r)');

model.ies_vsm.var.dhn.h_load_s(t, indexset_load) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_load, loc.node.loadflow)' .* ...
    model.ies_vsm.var.dhn.T_load_s(t, indexset_load);
model.ies_vsm.var.dhn.h_load_r(t, indexset_load) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.node(indexset_load, loc.node.loadflow)' .* ...
    model.ies_vsm.var.dhn.T_load_r(t, indexset_load);

model.ies_vsm.var.dhn.h_pipe_s_in(t,:) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.pipe(:, loc.pipe.massflow)' .* ...
    model.ies_vsm.var.dhn.T_pipe_s_in(t, :);
model.ies_vsm.var.dhn.h_pipe_s_out(t,:) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.pipe(:, loc.pipe.massflow)' .* ...
    model.ies_vsm.var.dhn.T_pipe_s_out(t, :);
model.ies_vsm.var.dhn.h_pipe_r_in(t,:) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.pipe(:, loc.pipe.massflow)' .* ...
    model.ies_vsm.var.dhn.T_pipe_r_in(t, :);
model.ies_vsm.var.dhn.h_pipe_r_out(t,:) = ...
    c_w /3600 * ones(length(t), 1) * ...
    data.dhn.pipe(:, loc.pipe.massflow)' .* ...
    model.ies_vsm.var.dhn.T_pipe_r_out(t, :);

%% heat power at each node
t = num_start : num_end;
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_source_r(t, indexset_source) == ...
    model.ies_vsm.var.dhn.T_node_r(t, indexset_source)) : ...
    'T_source_r = T_node_r');
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_load_s(t, indexset_load) == ...
    model.ies_vsm.var.dhn.T_node_s(t, indexset_load)) : ...
    'T_load_s = T_node_s');
for k = 1 : num_node
    indexset_pipe_fnode = [];
    indexset_pipe_tnode = [];
    current_node = data.dhn.node(k, loc.node.ID); %% 由0节点导致的bug
    for j = 1:num_pipe
        if data.dhn.pipe(j,loc.pipe.fnode) == current_node   % pipe from this node
            indexset_pipe_fnode(end+1) = j;
        elseif data.dhn.pipe(j,loc.pipe.tnode) == current_node % pipe to this node
            indexset_pipe_tnode(end+1) = j;
        end
    end
    if ~ isempty(indexset_pipe_tnode)
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (data.dhn.node(k, loc.node.sourceflow) * ...
            model.ies_vsm.var.dhn.T_source_s(t, k) + ...
            sum(ones(length(t), 1) * data.dhn.pipe(indexset_pipe_tnode, loc.pipe.massflow)' .* ...
            model.ies_vsm.var.dhn.T_pipe_s_out(t, indexset_pipe_tnode), 2) == ...
            (data.dhn.node(k, loc.node.sourceflow) + ...
            sum(data.dhn.pipe(indexset_pipe_tnode, loc.pipe.massflow), 1)) .* ...
            model.ies_vsm.var.dhn.T_node_s(t, k)) : ...
            'm_s * T_source_s + sum(m_p * T_s_out) = (m_s + sum(m_p)) * T_node_s');
    else
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (model.ies_vsm.var.dhn.T_source_s(t, k) == ...
            model.ies_vsm.var.dhn.T_node_s(t, k)) : ...
            'T_source_s == T_node_s');
    end
    if ~ isempty(indexset_pipe_fnode)
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (data.dhn.node(k, loc.node.loadflow) * ...
            model.ies_vsm.var.dhn.T_load_r(t, k) + ......
            sum(ones(length(t), 1) * data.dhn.pipe(indexset_pipe_fnode, loc.pipe.massflow)' .* ...
            model.ies_vsm.var.dhn.T_pipe_r_out(t, indexset_pipe_fnode), 2) == ...
            (data.dhn.node(k, loc.node.loadflow) + ...
            sum(data.dhn.pipe(indexset_pipe_fnode, loc.pipe.massflow), 1)) .* ...
            model.ies_vsm.var.dhn.T_node_r(t, k)) : ...
            'm_l * T_load_r + sum(m_p * T_r_out) = (m_l + sum(m_p)) * T_node_r');
    else
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (model.ies_vsm.var.dhn.T_load_r(t, k) == ...
            model.ies_vsm.var.dhn.T_node_r(t, k)) : ...
            'T_load_r = T_node_r');
    end
    if ~ isempty(indexset_pipe_fnode)
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (model.ies_vsm.var.dhn.T_pipe_s_in(t, indexset_pipe_fnode) == ...
            model.ies_vsm.var.dhn.T_node_s(t, k) * ones(1, length(indexset_pipe_fnode))) : ...
            'T_pipe_s_in = T_node_s');
    end
    if ~ isempty(indexset_pipe_tnode)
        model.ies_vsm.cons = model.ies_vsm.cons + ( ...
            (model.ies_vsm.var.dhn.T_pipe_r_in(t, indexset_pipe_tnode) == ...
            model.ies_vsm.var.dhn.T_node_r(t, k) * ones(1, length(indexset_pipe_tnode))) : ...
            'T_pipe_r_in = T_node_r');
    end
end

%% Temperature quasi-dynamic
t = num_start : num_end;
for j = 1:num_pipe
    model.ies_vsm.cons = model.ies_vsm.cons + ( ...
        (model.ies_vsm.var.dhn.T_pipe_s_out(t,j) == ...
        (1-beta(j)) * data.dhn.params.Tamb(t,j) + ...
        beta(j) * ...
        ((1-kappa(j)) * ...
        model.ies_vsm.var.dhn.T_pipe_s_in(t-gamma(j)-1,j) + ...
        kappa(j) * ...
        model.ies_vsm.var.dhn.T_pipe_s_in(t-gamma(j),j))) : ...
        'heatingsys: supply T of pipe ');
    model.ies_vsm.cons = model.ies_vsm.cons + ( ...
        (model.ies_vsm.var.dhn.T_pipe_r_out(t,j) == ...
        (1-beta(j)) * data.dhn.params.Tamb(t,j)  + ...
        beta(j) * ...
        ((1-kappa(j)) * ...
        model.ies_vsm.var.dhn.T_pipe_r_in(t-gamma(j)-1,j) + ...
        kappa(j) * ...
        model.ies_vsm.var.dhn.T_pipe_r_in(t-gamma(j),j))) : ...
        'heatingsys: return T of pipe ');
end

%% Node temperature limit
t = num_start : num_end;
% model.ies_vsm.cons = model.ies_vsm.cons + ( ...
%     (model.ies_vsm.var.dhn.T_node_s(t,:) >= ...
%     data.dhn.node(1,loc.node.Ts_min)) : 'T_node_s >= Tsmin');
% model.ies_vsm.cons = model.ies_vsm.cons + ( ...
%     (model.ies_vsm.var.dhn.T_node_s(t,:) <= ...
%     data.dhn.node(1,loc.node.Ts_max)) : 'T_node_s <= Tsmax');
% model.ies_vsm.cons = model.ies_vsm.cons + ( ...
%     (model.ies_vsm.var.dhn.T_node_r(t,:) >= ...
%     data.dhn.node(1,loc.node.Tr_min)) : 'T_node_r >= Trmin');
% model.ies_vsm.cons = model.ies_vsm.cons + ( ...
%     (model.ies_vsm.var.dhn.T_node_r(t,:) <= ...
%     data.dhn.node(1,loc.node.Tr_max)) : 'T_node_r <= Trmax');

model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_source_s(t, indexset_source) >= ...
    data.dhn.node(1,loc.node.Ts_min)) : 'T_source_s >= Tsmin');
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_source_s(t, indexset_source) <= ...
    data.dhn.node(1,loc.node.Ts_max)) : 'T_source_s <= Tsmax');
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_source_r(t, indexset_source) >= ...
    data.dhn.node(1,loc.node.Tr_min)) : 'T_source_r >= Trmin');
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_source_r(t, indexset_source) <= ...
    data.dhn.node(1,loc.node.Tr_max)) : 'T_source_r <= Trmax');

model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_load_s(t, indexset_load) >= ...
    data.dhn.node(1,loc.node.Ts_min)) : 'T_load_s >= Tsmin');
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_load_s(t, indexset_load) <= ...
    data.dhn.node(1,loc.node.Ts_max)) : 'T_load_s <= Tsmax');

model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_load_r(t, indexset_load) >= ...
    data.dhn.node(1,loc.node.Tr_min)) : 'T_load_r >= Trmin');

model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (model.ies_vsm.var.dhn.T_load_r(t, indexset_load) <= ...
    data.dhn.node(1,loc.node.Tr_max)) : 'T_load_r <= Trmax');

%% Final states constraints: supply temperature
t = num_start : num_end;
model.ies_vsm.cons = model.ies_vsm.cons + ( ...
    (sum(reshape(model.ies_vsm.var.dhn.h_source(t, :), 1, [])) >= ...
    sum(reshape(model.ies_vsm.var.dhn.h_load(t, :), 1, []))) : ...
    'sum(h_source) >= sum(h_load)');

%% Device
% % eb
for i = 1 : size(indexset_eb, 1)
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.P_eb(:, i) == ...
        model.ies_vsm.var.dhn.h_eb(:, i) / ...
        data.dhn.device(indexset_eb(i,1), loc.device.eta)) : ...
        '');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        data.dhn.device(indexset_eb(i,1), loc.device.Pmin) <= ...
        model.ies_vsm.var.dhn.P_eb(:, i) <= ...
        data.dhn.device(indexset_eb(i,1), loc.device.Pmax)) : ...
        '');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.cost_eb(:,i) == ...
        data.dhn.device(indexset_eb(i,1), loc.device.elecprice) * ...
        model.ies_vsm.var.dhn.P_eb(:,i) * time_interval_heat) : '');
end

% % gb
for i = 1 : size(indexset_gb, 1)
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        data.dhn.device(indexset_gb(i,1), loc.device.Hmin) <= ...
        model.ies_vsm.var.dhn.h_gb(:, i) <= ...
        data.dhn.device(indexset_gb(i,1), loc.device.Hmax)) : ...
        '');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.cost_gb(:,i) == ...
        data.dhn.device(indexset_gb(i,1), loc.device.fuelprice) * ...
        model.ies_vsm.var.dhn.h_gb(:,i) * time_interval_heat) : '');
end

if ~ isempty(indexset_gb)
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.h_device(:, indexset_gb) == ...
        model.ies_vsm.var.dhn.h_gb ...
        ) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.P_device(:, indexset_gb) == 0 ...
        ) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.cost_device(:, indexset_gb) == ...
        model.ies_vsm.var.dhn.cost_gb ...
        ) : '');
end
if ~ isempty(indexset_eb)
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.h_device(:, indexset_eb) == ...
        model.ies_vsm.var.dhn.h_eb ...
        ) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.P_device(:, indexset_eb) == ...
        model.ies_vsm.var.dhn.P_eb ...
        ) : '');
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.cost_device(:, indexset_eb) == ...
        model.ies_vsm.var.dhn.cost_eb ...
        ) : '');
end
end

%% model of buildings
function model_building()
global data model;
%%
%% Params
loc = data.loc.building;

time_interval_elec = data.settings.time_interval;
time_interval_heat = data.settings.time_interval_heat;
num_period_heat = data.settings.num_period*time_interval_elec/time_interval_heat;
num_building = size(data.building.table, 1);

%% param
t = 1:num_period_heat;
Tout = data.profile.Tout;
data.building.Tout(t,1) = Tout( ...
    fix((t-1)*time_interval_heat/time_interval_elec)+1,1);
ratio = exp(-time_interval_heat ./ data.building.table(:,loc.R)' ...
    ./data.building.table(:,loc.C)');
data.building.alpha = ratio;
data.building.beta = (1-ratio) .* data.building.table(:,loc.R)'./ ...
    data.building.table(:,loc.num)';
data.building.gamma = 1 - ratio;

%%
model.ies_vsm.var.building.h_load = sdpvar(num_period_heat, num_building, 'full');
model.ies_vsm.var.building.Tin = sdpvar(num_period_heat, num_building, 'full');

%% Modeling
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.building.h_load >= 0) : '');

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.building.Tin(1,:) == ...
    data.building.alpha .* data.building.table(:,loc.Tin_initial)' + ...
    data.building.beta .* model.ies_vsm.var.building.h_load(1,:) + ...
    data.building.gamma .* data.building.Tout(1,1)) : ...
    'Buildings: Tin equation');

if num_period_heat >= 2
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.building.Tin(2:end,:) == ...
        ones(num_period_heat-1,1) * data.building.alpha .* ...
        model.ies_vsm.var.building.Tin(1:end-1,:) + ...
        ones(num_period_heat-1,1) * data.building.beta .* ...
        model.ies_vsm.var.building.h_load(2:end,:) + ...
        ones(num_period_heat-1,1) * data.building.gamma .* ...
        data.building.Tout(2:end,:)) : ...
        'Buildings: Tin equation');
end

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    ones(num_period_heat,1) * data.building.table(:, loc.Tin_min)' <= ...
    model.ies_vsm.var.building.Tin(:,:) <= ...
    ones(num_period_heat,1) * data.building.table(:, loc.Tin_max)' ...
    ) : 'Tin_min <= Tin <= Tin_max');

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    sum(model.ies_vsm.var.building.Tin, 1) == ...
    num_period_heat * data.building.table(:, loc.Tin_opt)' ...
    ) : 'sum(Tin) = num_period_heat * Tin_opt');

end


%% model of coupling relationship
function model_couple()
global data model;

num_time_initial = data.settings.num_initialtime_dhn;
time_interval_elec = data.settings.time_interval;
time_interval_heat = data.settings.time_interval_heat;
num_period_heat = data.settings.num_period*time_interval_elec/time_interval_heat;

loc = data.loc;
indexset_sourcenode = find(data.dhn.node(:, loc.dhn.node.sourceflow) ~= 0);
indexset_loadnode = find(data.dhn.node(:,loc.dhn.node.loadflow) ~= 0);
t = num_time_initial + 1 : num_time_initial + num_period_heat;

% % eps & dhn
for i = 1 : size(indexset_sourcenode, 1)
    indexset_source_gen = find(data.eps.gen(:,35) == ...
        data.dhn.node(indexset_sourcenode(i,1), loc.dhn.node.ID));
    indexset_source_device = find(data.dhn.device(:, loc.dhn.device.nodeID) == ...
        data.dhn.node(indexset_sourcenode(i,1), loc.dhn.node.ID));

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.h_source(t, indexset_sourcenode(i,1)) == ...
        sum(model.ies_vsm.var.eps.H_gen(:, indexset_source_gen), 2) + ...
        sum(model.ies_vsm.var.dhn.h_device(t, indexset_source_device), 2) ...
        ));
end

% % dhn & building
% model.ies_vsm.cons = model.ies_vsm.cons + (( ...
%     model.ies_vsm.var.dhn.h_load(t, indexset_loadnode) == ...
%     1e3 * model.ies_vsm.var.building.h_load ...
%     ));

% model.ies_vsm.cons = model.ies_vsm.cons + (( ...
%     model.ies_vsm.var.dhn.h_load(t, indexset_loadnode) == ...
%     1e3 * model.ies_vsm.var.dhn.h_load(t, indexset_loadnode) ...
%     ));

end


%% regulation strategy
function model_regulation_strategy(dhs_control_mode, num_iter)
global data model; %#ok<*GVMIS>

%%
loc = data.loc;
num_period = data.settings.num_period;
num_time_initial = data.settings.num_initialtime_dhn;
time_interval_elec = data.settings.time_interval;
time_interval_heat = data.settings.time_interval_heat;
num_period_heat = data.settings.num_period*time_interval_elec/time_interval_heat;

num_gen = size(data.eps.gen, 1);
indexset_load = find(data.eps.bus(:,2) == 1);
indexset_gen = find(data.eps.bus(:,2) > 1);
indexset_chp = find(data.eps.gen(:,24) == 2);
indexset_source = find(data.dhn.node(:, loc.dhn.node.sourceflow) ~= 0);
indexset_loadnode = find(data.dhn.node(:,loc.dhn.node.loadflow) ~= 0);
t = num_time_initial + 1 : num_time_initial + num_period_heat;
baseMVA = data.settings.baseMVA;

%% vsm: load increase pattern
% % electrical load
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.P(:, indexset_load) * baseMVA == ...
    - (1 + model.ies_vsm.var.lambda_e) * ...
    data.profile.P_load(1:num_period, indexset_load ...
    )) : 'P load increase pattern');

model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.eps.Q(:, indexset_load) * baseMVA == ...
    - (1 + model.ies_vsm.var.lambda_e) * ...
    data.profile.Q_load(1:num_period, indexset_load ...
    )) : 'Q load increase pattern');

% % heat load
model.ies_vsm.cons = model.ies_vsm.cons + (( ...
    model.ies_vsm.var.dhn.h_load(t, indexset_loadnode) == ...
    (1 + model.ies_vsm.var.lambda_h) * ...
    1e-3 * model.ies_vsm.var.building.h_load ...
    ) : 'H load increase pattern');

%% dhs control mode
if dhs_control_mode == 1
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.T_source_s(t, indexset_source) == ...
        data.settings.T_source_set ...
        ) : 'Tsource_s = Tsource_set');

    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.building.Tin(:,:) == ...
        ones(num_period, 1) * ...
        data.building.table(:, loc.building.Tin_opt)' ...
        ) : 'Tin = Tin_opt');

elseif dhs_control_mode == 2
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.dhn.T_source_s(t, indexset_source) == ...
        data.settings.T_source_set ...
        ) : 'Tsource_s = Tsource_set');

elseif dhs_control_mode == 3
    model.ies_vsm.cons = model.ies_vsm.cons + (( ...
        model.ies_vsm.var.building.Tin(:,:) == ...
        ones(num_period, 1) * ...
        data.building.table(:, loc.building.Tin_opt)' ...
        ) : 'Tin = Tin_opt');

elseif dhs_control_mode == 4
    %
end


end

